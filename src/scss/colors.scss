@import "_mixins.scss";
@import "_variables.scss";



@each $name, $sets in $colors {
  @each $type, $set in $sets {
    @if $type == 'base' {
      .#{$name} {
        background: $set !important;
      }
      .text-#{$name} {
        color: $set !important;
      }
    }
    @else{
      @each $key, $value in $set {
        .#{$name}-#{$type}-#{$key} {
          background: $value !important;
        }
        .text-#{$name}-#{$type}-#{$key} {
          color: $value !important;
        }
      }
    }
  }
}


@mixin colorClass($name) {
  &.outline {
    color: color($name) !important;
    background: transparent !important;
    border: color($name, base) 1px solid !important;
    &:hover {
      color: #fff !important;
      background: color($name) !important;
    }
  }

  &.text {
    background: transparent !important;
    color: color($name) !important;
  }

  &.checkbox {
    background: transparent !important;
    > input {
      &:checked {
        background: color($name) !important;
        & + span::before {
          border-color: color($name) !important;
          background: color($name) !important;
        }
      }
      &:active {
        & + span::before {
          border-color: color($name) !important;
        }
      }
    }
  }

  &.radio {
    background: transparent !important;
    > span{
      &::after{
        background-color: color($name);
      }
    }
    > input{
      &:checked {
         background-color: color($name);
         & + span::before {
           border-color: color($name);
         }
      }
    }
  }

  &.switch {
    background: transparent !important;
    > input {
      &:checked {
        background-color: color($name);
        & ~ span {
          &:before {
            background: rgba(color($name), 0.54) !important;
          }
          &:after {
            background: color($name) !important;
            border-color: color($name) !important;
          }
        }
      }
      &:active + span::before {
        background-color: rgba(color($name), 0.4);
      }
    }
  }

  &.text {
    &:hover {
      background: rgba(color($name), 0.1) !important;
    }
    > .rippleWave {
      background: rgba(color($name), 0.2) !important;
    }
  }
  &.range {
    background: color($name);
    &::-webkit-slider-thumb {
      background: color($name);
    }
  }
}

$base: ();
@each $name, $type in $colors {
  @if $name !=black {
    $base: append($base, $name);
  }
}

@include build-color-class($base);
